---
# playbook.yml
#
# WARNING: basically I'm just hacking around, I have spent enough time grasping
# the concepts lately. So, after all the tasks are dumped here or on tasks/
# directory I'll refactor them as roles

# Common
- hosts: all
  gather_subset:
    - '!all'
    - network

  tasks:
    - name: Update apt cache
      apt: update_cache=yes cache_valid_time=3600

    - name: Install docker and systemd depedencies
      apt:
        install_recommends: false
        name: "{{ item }}"
        state: present
      loop:
        - docker.io
        - docker-compose
        - systemd

    - name: Add  vagrant box users to docker group
      user:
        name: "{{ item }}"
        groups: docker
        append: true
      loop:
        - vagrant # TODO: expose as var
        - ubuntu

    - name: Create application directory hierarchy
      file:
        path: /opt/compose
        state: directory
        mode: '0754'
        recurse: yes
        owner: vagrant # TODO: expose as var
        group: vagrant # TODO: expose as var

    # TODO: get network prefix from variable
    - name: Set internal_net_ip_addr fact
      set_fact:
        internal_net_ip_addr: "{{ ansible_facts.all_ipv4_addresses|select('match', '192.168.5*')|first }}"
        cacheable: yes

    - name: Check internal network ipv4 fact
      debug:
        msg: "HOST_IP={{ internal_net_ip_addr }}"

    - name: Create systemd service template /etc/systemd/system/compose@.service
      template:
        src: roles/common/templates/compose@.service.j2
        dest: /etc/systemd/system/compose@.service
        owner: root
        group: root
        mode: '0755'

    # TODO: add host aliases on /etc/hosts file

# Provision Database hosts (PostgreSQL)
- hosts: databases
  gather_facts: no

  # TODO: move to external variable files
  # TODO: add a way to override unsecure passwords
  vars:
    postgresql_image: postgres:9.5
    postgresql_admin_pass: notsecure
    cms_dbname: cmsdb
    cms_dbuser: cmsuser
    cms_dbpass: notsecure

  tasks:
    - name: Pull PostgreSQL docker image
      docker_image:
        name: "{{ postgresql_image }}"
        source: pull

    - name: Create PostgreSQL compose directories
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
        owner: vagrant # TODO: expose as var
        group: vagrant # TODO: expose as var
      loop:
        - /opt/compose/postgresql
        - /opt/compose/postgresql/scripts

    - name: Generate PostgreSQL initialization scripts
      template:
        src: templates/postgresql/init-cms-database.sh.j2
        dest: /opt/compose/postgresql/scripts/init-cms-database.sh
        owner: vagrant # TODO: expose as var
        group: vagrant # TODO: expose as var
        mode: '0755'

    - name: Generate PostgreSQL compose file
      template:
        src: templates/postgresql/postgresql.yml.j2
        dest: /opt/compose/postgresql/docker-compose.yml
        owner: vagrant # TODO: expose as var
        group: vagrant # TODO: expose as var
        mode: '0755'

    - name: Start PostgreSQL compose
      service:
        name: compose@postgresql
        state: started
        enabled: yes

# Provision Database hosts (rabbitmq)
- hosts: databases
  gather_facts: no

  # TODO: move to external variable files
  # TODO: add a way to override unsecure passwords
  vars:
    rabbitmq_image: rabbitmq:3.8
    rabbitmq_hostname: orbits-mq
    rabbitmq_default_user: orbituser
    rabbitmq_default_pass: notsecure

  tasks:
    - name: Pull rabbitmq docker image
      docker_image:
        name: "{{ rabbitmq_image }}"
        source: pull

    - name: Create rabbitmq compose directories
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
        owner: vagrant # TODO: expose as var
        group: vagrant # TODO: expose as var
      loop:
        - /opt/compose/rabbitmq

    - name: Generate rabbitmq compose file
      template:
        src: templates/rabbitmq/rabbitmq.yml.j2
        dest: /opt/compose/rabbitmq/docker-compose.yml
        owner: vagrant # TODO: expose as var
        group: vagrant # TODO: expose as var
        mode: '0755'

    - name: Start rabbitmq compose
      service:
        name: compose@rabbitmq
        state: started
        enabled: yes

# Provision Database hosts (mongodb)
- hosts: databases
  gather_facts: no

  # TODO: move to external variable files
  # TODO: add a way to override unsecure passwords
  vars:
    mongodb_image: mongo:4.0
    mongodb_root_username: root
    mongodb_root_password: notsecure
    orbits_dbname: cmsdb
    orbits_dbuser: cmsuser
    orbits_dbpass: notsecure

  tasks:
    - name: Pull mongodb docker image
      docker_image:
        name: "{{ mongodb_image }}"
        source: pull

    - name: Create mongodb compose directories
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
        owner: vagrant # TODO: expose as var
        group: vagrant # TODO: expose as var
      loop:
        - /opt/compose/mongodb
        - /opt/compose/mongodb/scripts

    - name: Generate mongodb initialization scripts
      template:
        src: templates/mongodb/init-orbits.js.j2
        dest: /opt/compose/mongodb/scripts/init-orbits.js
        owner: vagrant # TODO: expose as var
        group: vagrant # TODO: expose as var
        mode: '0755'

    - name: Generate mongodb compose file
      template:
        src: templates/mongodb/mongodb.yml.j2
        dest: /opt/compose/mongodb/docker-compose.yml
        owner: vagrant # TODO: expose as var
        group: vagrant # TODO: expose as var
        mode: '0755'

    - name: Start mongodb compose
      service:
        name: compose@mongodb
        state: started
        enabled: yes

# Provision all the CMS workers
- hosts: cms-workers
  gather_subset:
    - '!all'
    - network

  tasks:
    - name: Update apt cache
      apt: update_cache=yes cache_valid_time=3600

    - name: Install C compilers
      apt:
        install_recommends: false
        name: "{{ item }}"
        state: present
      loop:
        - gcc
        - python
        - python3
        - openjdk-8-jdk
        - openjdk-11-jdk
        - php7.2-cli
        - php7.2-fpm
        - fpc
        - haskell-platform
        - rustc
        - mono-mcs
        - ruby
